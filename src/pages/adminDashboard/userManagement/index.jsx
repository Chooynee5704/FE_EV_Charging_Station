import { useState } from "react";
import "./index.scss";

const UserManagement = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [showUserModal, setShowUserModal] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);

  // Mock user data
  const users = [
    {
      id: 1,
      name: "Nguy·ªÖn VƒÉn A",
      email: "nguyenvana@email.com",
      phone: "0901234567",
      joinDate: "2024-01-15",
      status: "active",
      totalUsage: 125,
      totalSpent: 2500000,
      lastSession: "2024-12-20",
      avatar: "üë®",
    },
    {
      id: 2,
      name: "Tr·∫ßn Th·ªã B",
      email: "tranthib@email.com",
      phone: "0907654321",
      joinDate: "2024-02-20",
      status: "active",
      totalUsage: 89,
      totalSpent: 1800000,
      lastSession: "2024-12-21",
      avatar: "üë©",
    },
    {
      id: 3,
      name: "L√™ VƒÉn C",
      email: "levanc@email.com",
      phone: "0903456789",
      joinDate: "2024-03-10",
      status: "suspended",
      totalUsage: 45,
      totalSpent: 950000,
      lastSession: "2024-12-10",
      avatar: "üë®",
    },
    {
      id: 4,
      name: "Ph·∫°m Th·ªã D",
      email: "phamthid@email.com",
      phone: "0909876543",
      joinDate: "2024-03-25",
      status: "active",
      totalUsage: 67,
      totalSpent: 1400000,
      lastSession: "2024-12-22",
      avatar: "üë©",
    },
    {
      id: 5,
      name: "Ho√†ng Minh E",
      email: "hoangminhe@email.com",
      phone: "0905555666",
      joinDate: "2024-04-10",
      status: "pending",
      totalUsage: 12,
      totalSpent: 300000,
      lastSession: "2024-12-18",
      avatar: "üë®",
    },
  ];

  const filteredUsers = users.filter((user) => {
    const matchesSearch =
      user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.email.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus =
      statusFilter === "all" || user.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  const handleViewUser = (user) => {
    setSelectedUser(user);
    setShowUserModal(true);
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(amount);
  };

  return (
    <div className="user-management">
      {/* Header */}
      <div className="page-header">
        <div className="header-content">
          <h2>Qu·∫£n l√Ω ng∆∞·ªùi d√πng</h2>
          <p>Qu·∫£n l√Ω t√†i kho·∫£n v√† ho·∫°t ƒë·ªông c·ªßa ng∆∞·ªùi d√πng</p>
        </div>
        <button className="btn-primary">
          <span>üìä</span> Xu·∫•t b√°o c√°o
        </button>
      </div>

      {/* Filters */}
      <div className="filters-section">
        <div className="search-box">
          <input
            type="text"
            placeholder="T√¨m ki·∫øm ng∆∞·ªùi d√πng..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="search-input"
          />
        </div>
        <select
          value={statusFilter}
          onChange={(e) => setStatusFilter(e.target.value)}
          className="status-filter"
        >
          <option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</option>
          <option value="active">Ho·∫°t ƒë·ªông</option>
          <option value="suspended">T·∫°m kh√≥a</option>
          <option value="pending">Ch·ªù x√°c th·ª±c</option>
        </select>
      </div>

      {/* User Statistics */}
      <div className="stats-overview">
        <div className="stat-mini">
          <div className="stat-icon">üë•</div>
          <div className="stat-info">
            <span className="stat-number">50,247</span>
            <span className="stat-label">T·ªïng ng∆∞·ªùi d√πng</span>
          </div>
        </div>
        <div className="stat-mini">
          <div className="stat-icon">üü¢</div>
          <div className="stat-info">
            <span className="stat-number">48,956</span>
            <span className="stat-label">ƒêang ho·∫°t ƒë·ªông</span>
          </div>
        </div>
        <div className="stat-mini">
          <div className="stat-icon">üìà</div>
          <div className="stat-info">
            <span className="stat-number">+1,234</span>
            <span className="stat-label">M·ªõi th√°ng n√†y</span>
          </div>
        </div>
        <div className="stat-mini">
          <div className="stat-icon">‚≠ê</div>
          <div className="stat-info">
            <span className="stat-number">4.8/5</span>
            <span className="stat-label">ƒê√°nh gi√° TB</span>
          </div>
        </div>
      </div>

      {/* Users Table */}
      <div className="table-container">
        <table className="users-table">
          <thead>
            <tr>
              <th>ID</th>
              <th>Ng∆∞·ªùi d√πng</th>
              <th>Email</th>
              <th>S·ªë ƒëi·ªán tho·∫°i</th>
              <th>Ng√†y tham gia</th>
              <th>T·ªïng s·ª≠ d·ª•ng</th>
              <th>Chi ti√™u</th>
              <th>Tr·∫°ng th√°i</th>
              <th>Thao t√°c</th>
            </tr>
          </thead>
          <tbody>
            {filteredUsers.map((user) => (
              <tr key={user.id}>
                <td>#{user.id}</td>
                <td className="user-info">
                  <div className="user-avatar">{user.avatar}</div>
                  <div className="user-details">
                    <span className="user-name">{user.name}</span>
                  </div>
                </td>
                <td>{user.email}</td>
                <td>{user.phone}</td>
                <td>{user.joinDate}</td>
                <td>{user.totalUsage} l·∫ßn</td>
                <td className="revenue">{formatCurrency(user.totalSpent)}</td>
                <td>
                  <span className={`status-badge ${user.status}`}>
                    {user.status === "active" && "üü¢ Ho·∫°t ƒë·ªông"}
                    {user.status === "suspended" && "üî¥ T·∫°m kh√≥a"}
                    {user.status === "pending" && "üü° Ch·ªù x√°c th·ª±c"}
                  </span>
                </td>
                <td>
                  <div className="action-buttons">
                    <button
                      className="btn-icon view"
                      title="Xem chi ti·∫øt"
                      onClick={() => handleViewUser(user)}
                    >
                      üëÅÔ∏è
                    </button>
                    <button className="btn-icon edit" title="Ch·ªânh s·ª≠a">
                      ‚úèÔ∏è
                    </button>
                    <button className="btn-icon message" title="G·ª≠i tin nh·∫Øn">
                      ‚úâÔ∏è
                    </button>
                    <button className="btn-icon suspend" title="Kh√≥a/M·ªü kh√≥a">
                      üîí
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      <div className="pagination">
        <button className="page-btn">‚Äπ Tr∆∞·ªõc</button>
        <button className="page-btn active">1</button>
        <button className="page-btn">2</button>
        <button className="page-btn">3</button>
        <button className="page-btn">Sau ‚Ä∫</button>
      </div>

      {/* User Detail Modal */}
      {showUserModal && selectedUser && (
        <div className="modal-overlay" onClick={() => setShowUserModal(false)}>
          <div className="modal large" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>Chi ti·∫øt ng∆∞·ªùi d√πng</h3>
              <button
                className="close-btn"
                onClick={() => setShowUserModal(false)}
              >
                ‚úï
              </button>
            </div>
            <div className="modal-body">
              <div className="user-detail-content">
                <div className="user-basic-info">
                  <div className="user-avatar-large">{selectedUser.avatar}</div>
                  <div className="user-info-text">
                    <h4>{selectedUser.name}</h4>
                    <p>{selectedUser.email}</p>
                    <p>{selectedUser.phone}</p>
                  </div>
                </div>
                <div className="user-stats-grid">
                  <div className="stat-item">
                    <span className="stat-label">T·ªïng s·ª≠ d·ª•ng</span>
                    <span className="stat-value">
                      {selectedUser.totalUsage} l·∫ßn
                    </span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-label">T·ªïng chi ti√™u</span>
                    <span className="stat-value">
                      {formatCurrency(selectedUser.totalSpent)}
                    </span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-label">Ng√†y tham gia</span>
                    <span className="stat-value">{selectedUser.joinDate}</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-label">L·∫ßn cu·ªëi s·ª≠ d·ª•ng</span>
                    <span className="stat-value">
                      {selectedUser.lastSession}
                    </span>
                  </div>
                </div>
              </div>
            </div>
            <div className="modal-footer">
              <button
                className="btn-secondary"
                onClick={() => setShowUserModal(false)}
              >
                ƒê√≥ng
              </button>
              <button className="btn-primary">Ch·ªânh s·ª≠a th√¥ng tin</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default UserManagement;
