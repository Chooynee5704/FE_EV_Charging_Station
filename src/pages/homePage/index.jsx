import { useEffect, useRef, useState } from "react";
import { useNavigate } from "react-router-dom";
import ChargingMap from "../../components/chargingMap";
import "./index.scss";

// ===== Data =====
const features = [
  { icon: "üó∫Ô∏è", title: "T√¨m ki·∫øm tr·ª• s·∫°c g·∫ßn b·∫°n", description: "D·ªÖ d√†ng t√¨m ki·∫øm c√°c tr·ª• s·∫°c xe ƒëi·ªán g·∫ßn nh·∫•t v·ªõi v·ªã tr√≠ hi·ªán t·∫°i c·ªßa b·∫°n tr√™n b·∫£n ƒë·ªì" },
  { icon: "‚ö°", title: "Th√¥ng tin chi ti·∫øt tr·ª• s·∫°c", description: "Xem th√¥ng tin ƒë·∫ßy ƒë·ªß v·ªÅ lo·∫°i s·∫°c, c√¥ng su·∫•t, gi√° c·∫£ v√† t√¨nh tr·∫°ng ho·∫°t ƒë·ªông" },
  { icon: "üì±", title: "ƒê·∫∑t ch·ªó tr∆∞·ªõc", description: "ƒê·∫∑t tr∆∞·ªõc ch·ªó s·∫°c ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ s·∫µn khi b·∫°n ƒë·∫øn, ti·∫øt ki·ªám th·ªùi gian ch·ªù ƒë·ª£i" },
  { icon: "üí≥", title: "Thanh to√°n ti·ªán l·ª£i", description: "Thanh to√°n d·ªÖ d√†ng qua v√≠ ƒëi·ªán t·ª≠, th·∫ª ng√¢n h√†ng ho·∫∑c QR code ngay tr√™n ·ª©ng d·ª•ng" },
  { icon: "üìä", title: "Theo d√µi qu√° tr√¨nh s·∫°c", description: "Gi√°m s√°t th·ªùi gian s·∫°c, m·ª©c pin hi·ªán t·∫°i v√† chi ph√≠ trong th·ªùi gian th·ª±c" },
  { icon: "üîî", title: "Th√¥ng b√°o th√¥ng minh", description: "Nh·∫≠n th√¥ng b√°o khi s·∫°c ho√†n t·∫•t, c·∫£nh b√°o khi tr·ª• s·∫°c g·∫∑p s·ª± c·ªë" },
];

const mapStations = [
  { 
    id: 1, 
    name: "Tr·∫°m s·∫°c Vincom ƒê·ªìng Kh·ªüi", 
    speed: "50 kW", 
    price: "3.500 ƒë/kWh", 
    coords: [10.7769, 106.7009], 
    type: "DC", 
    slots: { ac: 2, dc: 1, ultra: 0 }, 
    status: "available",
    address: "72 L√™ Th√°nh T√¥n, Qu·∫≠n 1, TP.HCM"
  },
  { 
    id: 2, 
    name: "Tr·∫°m s·∫°c Landmark 81", 
    speed: "150 kW", 
    price: "4.000 ƒë/kWh", 
    coords: [10.7944, 106.7219], 
    type: "DC", 
    slots: { ac: 1, dc: 3, ultra: 1 }, 
    status: "busy",
    address: "720A ƒêi·ªán Bi√™n Ph·ªß, B√¨nh Th·∫°nh, TP.HCM"
  },
  { 
    id: 3, 
    name: "Tr·∫°m s·∫°c Crescent Mall", 
    speed: "50 kW", 
    price: "3.200 ƒë/kWh", 
    coords: [10.7374, 106.7223], 
    type: "DC", 
    slots: { ac: 0, dc: 2, ultra: 0 }, 
    status: "maintenance",
    address: "101 T√¥n D·∫≠t Ti√™n, Qu·∫≠n 7, TP.HCM"
  },
  { 
    id: 4, 
    name: "Tr·∫°m s·∫°c AEON B√¨nh T√¢n", 
    speed: "22 kW", 
    price: "2.800 ƒë/kWh", 
    coords: [10.75, 106.6], 
    type: "AC", 
    slots: { ac: 4, dc: 0, ultra: 0 }, 
    status: "available",
    address: "1 ƒê∆∞·ªùng S·ªë 17A, B√¨nh Tr·ªã ƒê√¥ng B, B√¨nh T√¢n, TP.HCM"
  },
  { 
    id: 5, 
    name: "Tr·∫°m s·∫°c GIGAMALL", 
    speed: "50 kW", 
    price: "3.300 ƒë/kWh", 
    coords: [10.85, 106.75], 
    type: "DC", 
    slots: { ac: 1, dc: 1, ultra: 1 }, 
    status: "available",
    address: "240 Ph·∫°m VƒÉn ƒê·ªìng, Th·ªß ƒê·ª©c, TP.HCM"
  }
];


// Haversine formula
const getDistanceKm = (lat1, lon1, lat2, lon2) => {
  const R = 6371;
  const dLat = (lat2 - lat1) * (Math.PI / 180);
  const dLon = (lon2 - lon1) * (Math.PI / 180);
  const a =
    Math.sin(dLat / 2) ** 2 +
    Math.cos(lat1 * (Math.PI / 180)) *
    Math.cos(lat2 * (Math.PI / 180)) *
    Math.sin(dLon / 2) ** 2;
  return R * (2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)));
};

// ===== About Component (top-level) =====
const About = () => {
  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);
};

// ===== HomePage Component =====
const HomePage = () => {
  const featuresRef = useRef(null);
  const stepsRef = useRef(null);
  const mapSectionRef = useRef(null);

  const [selectedId, setSelectedId] = useState(null);
  const itemRefs = useRef({});
  const [userLocation, setUserLocation] = useState(null);
  const [nearbyStations, setNearbyStations] = useState([]);
  const navigate = useNavigate();

  const updateLocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (pos) => {
          const { latitude, longitude } = pos.coords;
          const coords = [latitude, longitude];
          setUserLocation(coords);

          const withDistance = mapStations.map((s) => ({
            ...s,
            distance: getDistanceKm(latitude, longitude, s.coords[0], s.coords[1]),
          }));
          setNearbyStations(withDistance.sort((a, b) => a.distance - b.distance).slice(0, 5));
        },
        (err) => console.error("Kh√¥ng l·∫•y ƒë∆∞·ª£c v·ªã tr√≠:", err),
        { enableHighAccuracy: true }
      );
    }
  };

  useEffect(() => {
    updateLocation();
  }, []);

  const handleMarkerClick = (id) => setSelectedId(id);

  const handleBooking = (stationId) => {
    const token = localStorage.getItem("token");
    const redirectUrl = `/booking?station=${stationId}`;
    if (!token) {
      navigate(`/login?redirect=${encodeURIComponent(redirectUrl)}`);
    } else {
      navigate(redirectUrl);
    }
  };

  return (
    <div className="homepage">
      <main className="homepage__main">
        {/* Hero Section */}
        <section className="homepage__hero">
          <div className="homepage__hero-content">
            <h1>T√¨m tr·∫°m s·∫°c xe ƒëi·ªán d·ªÖ d√†ng, s·∫°c nhanh ch√≥ng</h1>
            <p>
              ·ª®ng d·ª•ng t√¨m ki·∫øm v√† s·ª≠ d·ª•ng tr·ª• s·∫°c xe ƒëi·ªán h√†ng ƒë·∫ßu Vi·ªát Nam.
              H∆°n 500 tr·∫°m s·∫°c tr√™n to√†n qu·ªëc, ƒë·∫∑t ch·ªó tr∆∞·ªõc, thanh to√°n ti·ªán l·ª£i.
            </p>
            <div className="homepage__hero-actions">
              <button
                className="btn btn--primary"
                onClick={() => {
                  if (mapSectionRef.current) {
                    const topPos = mapSectionRef.current.getBoundingClientRect().top + window.scrollY;
                    window.scrollTo({ top: topPos , behavior: "smooth" });
                  }
                }}
              >
                T√¨m tr·∫°m s·∫°c ngay
              </button>
            </div>
          </div>
          <div className="homepage__hero-image">
            <div className="hero-visual">
              <div className="center-logo">
                <img src="/src/assets/logo.jpg" alt="Logo" className="hero-logo" />
              </div>
              <div className="charging-station">üöó</div>
              <div className="dashboard">‚ö°</div>
              <div className="mobile-app">üì±</div>
            </div>
          </div>
        </section>

        {/* Map + Station List */}
        <section className="homepage__map" ref={mapSectionRef}>
          <div className="section-header">
            <h2>B·∫£n ƒë·ªì tr·∫°m s·∫°c</h2>
            <p>T√¨m ki·∫øm v√† xem th√¥ng tin chi ti·∫øt c√°c tr·ª• s·∫°c g·∫ßn b·∫°n</p>
          </div>
          <div className="map-container">
            <div className="station-list">
              <h3>Tr·∫°m s·∫°c g·∫ßn b·∫°n</h3>
              <div className="station-scroll">
                {nearbyStations.map((station) => (
                  <div
                    key={station.id}
                    ref={(el) => (itemRefs.current[station.id] = el)}
                    className={`station-item ${selectedId === station.id ? "is-selected" : ""}`}
                    onClick={() => setSelectedId(station.id)}
                  >
                    <div className="station-header">
                      <h4>{station.name}</h4>
                      <span className="distance">{station.distance.toFixed(1)} km</span>
                    <div className={`status-indicator ${station.status}`}>
                        {station.status === "available" && "üü¢"}
                        {station.status === "busy" && "üü°"}
                        {station.status === "maintenance" && "üî¥"}
                      </div>
                    </div>
                    <div className="station-details">
                      <div className="item">‚ö° {station.speed}</div>
                      <div className="item">üí∞ {station.price}</div>
                      <div className="item">üîå AC: {station.slots.ac} | DC: {station.slots.dc} | Ultra: {station.slots.ultra}</div>
                    </div>
                    <div className="station-actions">
                      <button className="btn-small btn-primary" onClick={() => handleBooking(station.id)}>ƒê·∫∑t ch·ªó</button>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="map-view">
              <ChargingMap
                stations={mapStations}
                center={userLocation}
                zoom={12}
                onSelect={(station) => handleMarkerClick(station.id)}
                selectedStation={selectedId ? mapStations.find((s) => s.id === selectedId) : null}
                userLocation={userLocation}
                onUpdateLocation={updateLocation}
              />
            </div>
          </div>
        </section>

        {/* Features Section */}
        <section className="homepage__features" ref={featuresRef}>
          <div className="section-header">
            <h2>T√≠nh nƒÉng n·ªïi b·∫≠t</h2>
            <p>Nh·ªØng t√≠nh nƒÉng gi√∫p b·∫°n s·∫°c xe ƒëi·ªán thu·∫≠n ti·ªán v√† ti·∫øt ki·ªám</p>
          </div>
          <div className="features-grid">
            {features.map((feature, idx) => (
              <div key={idx} className="feature-card">
                <div className="feature-icon">{feature.icon}</div>
                <h3>{feature.title}</h3>
                <p>{feature.description}</p>
              </div>
            ))}
          </div>
        </section>

        {/* How to use Section */}
        <section className="homepage__howto" ref={stepsRef}>
          <div className="section-header">
            <h2>C√°ch s·ª≠ d·ª•ng ƒë∆°n gi·∫£n</h2>
            <p>Ch·ªâ v·ªõi 4 b∆∞·ªõc ƒë∆°n gi·∫£n ƒë·ªÉ s·∫°c xe ƒëi·ªán</p>
          </div>
          <div className="steps-grid">
            <div className="step-item">
              <div className="step-number">1</div>
              <h3>T√¨m tr·∫°m s·∫°c</h3>
              <p>S·ª≠ d·ª•ng b·∫£n ƒë·ªì ƒë·ªÉ t√¨m tr·∫°m s·∫°c g·∫ßn nh·∫•t</p>
            </div>
            <div className="step-item">
              <div className="step-number">2</div>
              <h3>ƒê·∫∑t ch·ªó</h3>
              <p>ƒê·∫∑t tr∆∞·ªõc ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ ch·ªó s·∫°c khi ƒë·∫øn</p>
            </div>
            <div className="step-item">
              <div className="step-number">3</div>
              <h3>Thanh to√°n</h3>
              <p>Thanh to√°n b·∫±ng nhi·ªÅu ph∆∞∆°ng th·ª©c</p>
            </div>
            <div className="step-item">
              <div className="step-number">4</div>
              <h3>K·∫øt n·ªëi v√† s·∫°c</h3>
              <p>C·∫Øm s·∫°c v√† theo d√µi qu√° tr√¨nh tr√™n ·ª©ng d·ª•ng</p>
            </div>
          </div>
        </section>

        {/* CTA Section */}
        <section className="homepage__cta">
          <h2>B·∫Øt ƒë·∫ßu h√†nh tr√¨nh xe ƒëi·ªán c·ªßa b·∫°n</h2>
        </section>

        {/* About Section */}
        <About />

      </main>
    </div>
  );
};

export default HomePage;
