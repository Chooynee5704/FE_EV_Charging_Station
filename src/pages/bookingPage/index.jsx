import { useEffect, useState } from "react";
import "./index.scss";

const stationTypes = [
  {
    id: "ac10",
    name: "Tr·∫°m s·∫°c xe m√°y AC 10 c·ªïng",
    price: "3.500 ƒë/kWh",
    speed: "7 kW",
    locations: [
      { id: 1, name: "H√† N·ªôi", coords: { top: "20%", left: "50%" } },
      { id: 2, name: "ƒê√† N·∫µng", coords: { top: "50%", left: "55%" } },
      { id: 3, name: "TP.HCM", coords: { top: "80%", left: "45%" } },
    ],
  },
  {
    id: "ac4",
    name: "Tr·∫°m s·∫°c xe m√°y AC 4 c·ªïng",
    price: "3.500 ƒë/kWh",
    speed: "7 kW",
    locations: [
      { id: 1, name: "H·∫£i Ph√≤ng", coords: { top: "18%", left: "60%" } },
      { id: 2, name: "Hu·∫ø", coords: { top: "55%", left: "52%" } },
      { id: 3, name: "C·∫ßn Th∆°", coords: { top: "82%", left: "42%" } },
    ],
  },
  {
    id: "dc60",
    name: "Tr·∫°m s·∫°c nhanh DC 60 kW",
    price: "5.000 ƒë/kWh",
    speed: "60 kW",
    locations: [
      { id: 1, name: "Qu·∫£ng Ninh", coords: { top: "15%", left: "58%" } },
      { id: 2, name: "Nha Trang", coords: { top: "70%", left: "53%" } },
      { id: 3, name: "S√≥c TrƒÉng", coords: { top: "85%", left: "44%" } },
    ],
  },
];

function getNowFormatted() {
  const now = new Date();
  return new Date(now.getTime() - now.getTimezoneOffset() * 60000)
    .toISOString()
    .slice(0, 16);
}

export default function BookingPage() {
  const [selectedType, setSelectedType] = useState(null);
  const [selectedLocation, setSelectedLocation] = useState(null);
  const [time, setTime] = useState(getNowFormatted());
  const [payment, setPayment] = useState("ewallet");
  const [history, setHistory] = useState([]);
  const [chargingStatus, setChargingStatus] = useState(null);

  const handleBooking = () => {
    if (!selectedType || !selectedLocation || !time) {
      alert("Vui l√≤ng ch·ªçn lo·∫°i tr·∫°m, ƒë·ªãa ƒëi·ªÉm v√† th·ªùi gian!");
      return;
    }

    const booking = {
      type: selectedType.name,
      location: selectedLocation.name,
      speed: selectedType.speed,
      price: selectedType.price,
      time,
      payment,
      status: "ƒêang s·∫°c",
    };

    setHistory([booking, ...history]);
    setChargingStatus(booking);

    alert(
      `ƒê·∫∑t ch·ªó th√†nh c√¥ng!\nTr·∫°m: ${booking.type}\nƒê·ªãa ƒëi·ªÉm: ${booking.location}\nTh·ªùi gian: ${booking.time}\nThanh to√°n: ${booking.payment}`
    );
  };

  const locationsToShow = selectedType
    ? selectedType.locations.map((loc) => ({ ...loc, type: selectedType }))
    : stationTypes.flatMap((t) =>
        t.locations.map((loc) => ({ ...loc, type: t }))
      );

  useEffect(() => {
      window.scrollTo(0, 0);
    }, []);

  return (
    <div className="booking-layout">
      {/* B√™n tr√°i: Form + tr·∫°ng th√°i + l·ªãch s·ª≠ */}
      <div className="left-panel">
        <h1>ƒêƒÉng k√Ω s·∫°c</h1>

        <h2>Ch·ªçn lo·∫°i tr·∫°m</h2>
        <div className="type-list">
          {stationTypes.map((type) => (
            <button
              key={type.id}
              className={`type-btn ${
                selectedType?.id === type.id ? "active" : ""
              }`}
              onClick={() => {
                setSelectedType(type);
                setSelectedLocation(null);
              }}
            >
              ‚ö° {type.name} <br />
              <small>
                {type.speed} | {type.price}
              </small>
            </button>
          ))}
        </div>

        {selectedLocation && (
          <div className="summary">
            <p>
              <b>Lo·∫°i tr·∫°m:</b> {selectedLocation.type?.name}
            </p>
            <p>
              <b>ƒê·ªãa ƒëi·ªÉm:</b> {selectedLocation.name}
            </p>
            <p>
              <b>T·ªëc ƒë·ªô:</b> {selectedLocation.type?.speed}
            </p>
            <p>
              <b>Gi√°:</b> {selectedLocation.type?.price}
            </p>
          </div>
        )}

        <label>Th·ªùi gian s·∫°c:</label>
        <input
          type="datetime-local"
          value={time}
          min={getNowFormatted()}
          onChange={(e) => setTime(e.target.value)}
        />

        <label>Ph∆∞∆°ng th·ª©c thanh to√°n:</label>
        <select value={payment} onChange={(e) => setPayment(e.target.value)}>
          <option value="ewallet">V√≠ ƒëi·ªán t·ª≠</option>
          <option value="bank">Ng√¢n h√†ng</option>
          <option value="subscription">G√≥i thu√™ bao</option>
        </select>

        <button className="book-btn" onClick={handleBooking}>
          ƒê·∫∑t ch·ªó & Thanh to√°n
        </button>

        {/* Tr·∫°ng th√°i s·∫°c */}
        {chargingStatus && (
          <div className="status-box">
            <h3>üîã Tr·∫°ng th√°i s·∫°c hi·ªán t·∫°i</h3>
            <p>
              <b>Tr·∫°m:</b> {chargingStatus.type}
            </p>
            <p>
              <b>ƒê·ªãa ƒëi·ªÉm:</b> {chargingStatus.location}
            </p>
            <p>
              <b>Th·ªùi gian:</b> {chargingStatus.time}
            </p>
            <p>
              <b>Tr·∫°ng th√°i:</b> {chargingStatus.status}
            </p>
          </div>
        )}

        {/* L·ªãch s·ª≠ ƒë·∫∑t ch·ªó */}
        {history.length > 0 && (
          <div className="history-box">
            <h3>üìú L·ªãch s·ª≠ ƒë·∫∑t ch·ªó</h3>
            <ul>
              {history.map((h, i) => (
                <li key={i}>
                  {h.type} - {h.location} - {h.time} ({h.status})
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>

      {/* B√™n ph·∫£i: Map */}
      <div className="right-panel">
        <h2>B·∫£n ƒë·ªì tr·∫°m s·∫°c</h2>
        <div className="map-container">
          <img src="/src/config/assets/map.jpg" alt="B·∫£n ƒë·ªì" className="map-image" />

          {locationsToShow.map((loc) => (
            <button
              key={`${loc.type.id}-${loc.id}`}
              className={`map-marker ${
                selectedLocation?.id === loc.id &&
                selectedLocation?.type?.id === loc.type.id
                  ? "active"
                  : ""
              }`}
              style={{
                top: loc.coords.top,
                left: loc.coords.left,
              }}
              onClick={() => setSelectedLocation(loc)}
            >
              üìç
            </button>
          ))}
        </div>
      </div>
    </div>
  );
}
